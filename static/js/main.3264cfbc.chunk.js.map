{"version":3,"sources":["components/Recipe/Recipe.js","components/ModalBackground/ModalBackground.js","containers/Home/FullRecipe/FullRecipe.js","containers/Home/Recipes/Recipes.js","containers/Home/NewRecipe/NewRecipe.js","containers/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["recipe","props","className","onClick","clicked","title","ingredients","instructions","modalBackground","FullRecipe","this","closed","children","Component","Recipes","state","recipes","modalActive","onClickRecipe","recipeClicked","asd","setState","key","closeModal","axios","get","then","response","niz","ob","i","Object","keys","data","length","push","map","full","Helmet","type","placeholder","style","color","width","margin","fontSize","NewRecipe","postRecipeHandler","post","history","replace","onChange","event","target","value","name","rows","Home","to","from","path","component","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3264cfbc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Recipe.css';\r\n\r\nconst recipe = (props) => {\r\n    return(\r\n        <article className=\"Recipe\" onClick={props.clicked}>\r\n            <h3>Naslov: {props.title}</h3>\r\n            <p>Sastojci: {props.ingredients}</p>\r\n            <p>Instrukcije: {props.instructions}</p>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default recipe;\r\n","import React from 'react';\r\nimport './ModalBackground.css';\r\n\r\nconst modalBackground = (props) => {\r\n    return (\r\n        <div className=\"ModalBackground\" onClick={props.clicked}></div>\r\n    );\r\n}\r\n\r\nexport default modalBackground;","import React, { Component } from 'react';\r\nimport ModalBackground from '../../../components/ModalBackground/ModalBackground';\r\nimport './FullRecipe.css';\r\n\r\nclass FullRecipe extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <ModalBackground clicked={this.props.closed} />\r\n                <div className=\"FullRecipe\">\r\n                    {this.props.children}\r\n                </div>      \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FullRecipe;","import React, { Component } from 'react';\r\nimport './Recipes.css';\r\nimport axios from 'axios'\r\nimport Recipe from '../../../components/Recipe/Recipe';\r\nimport { Helmet } from 'react-helmet';\r\nimport FullRecipe from '../FullRecipe/FullRecipe';\r\n\r\nconst TITLE = \"Recipes\";\r\n\r\nclass Recipes extends Component {\r\n    state = {\r\n        recipes: [],\r\n        modalActive: false,\r\n        onClickRecipe: {}\r\n    }\r\n\r\n    componentDidMount () {\r\n            axios.get('https://recipe-project-6.firebaseio.com/podaci.json')\r\n            .then(response => {\r\n                let niz = [];\r\n                let ob = {};\r\n\r\n                for(let i=0; i<Object.keys(response.data).length; i++){\r\n                    let title = response.data[Object.keys(response.data)[i]].title;\r\n                    let ingredients = response.data[Object.keys(response.data)[i]].ingredients;\r\n                    let instructions = response.data[Object.keys(response.data)[i]].instructions;\r\n                    let key = i;\r\n\r\n                    ob = {\r\n                        title: title,\r\n                        ingredients: ingredients,\r\n                        instructions: instructions,\r\n                        key: key\r\n                    }\r\n                    niz.push(ob);\r\n                }\r\n\r\n                this.setState({\r\n                    recipes: niz\r\n                })\r\n\r\n            });\r\n    }\r\n\r\n    recipeClicked = (asd) => {\r\n        this.setState({\r\n                modalActive: true, \r\n                onClickRecipe: {\r\n                    title: asd.title,\r\n                    ingredients: asd.ingredients,\r\n                    instructions: asd.instructions,\r\n                    key: asd.key\r\n                }\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({modalActive: false});\r\n    }\r\n\r\n    render () {\r\n        let recipes = this.state.recipes.map(recipe => {\r\n            return (        \r\n                <Recipe \r\n                    key={recipe.key} \r\n                    title={recipe.title} \r\n                    ingredients={recipe.ingredients} \r\n                    instructions={recipe.instructions} \r\n                    clicked={ () => this.recipeClicked(recipe)}\r\n                />\r\n            )\r\n        });\r\n\r\n        let full = null;\r\n        if(this.state.modalActive){\r\n            full =  <FullRecipe closed={this.closeModal}>\r\n                        <h1>Title: {this.state.onClickRecipe.title}</h1>\r\n                        <h1>Ingredients: {this.state.onClickRecipe.ingredients}</h1>\r\n                        <h1>Instructions: {this.state.onClickRecipe.instructions}</h1>\r\n                    </FullRecipe>\r\n        }else{\r\n            full = null;\r\n        }\r\n        return (\r\n            <div>\r\n                <Helmet>\r\n                    <title>{TITLE}</title>    \r\n                </Helmet>\r\n\r\n                <div className=\"header\">\r\n                    <input type=\"text\" placeholder=\"Search...\" />\r\n                    <h1 style={{color: 'white'}}>Recipes</h1>\r\n                    <p style={{color: 'white', width: '70%', margin: 'auto', fontSize: '20px'}}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla volutpat sem sit amet magna tempus, ac ultricies risus tristique.</p>\r\n                </div>\r\n                <div className=\"prikaz\">\r\n                    {recipes}\r\n                </div>      \r\n                {full}\r\n            </div>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Recipes;\r\n\r\n\r\n\r\n// \"homepage\": \"https://igorlakic2.github.io/react-recipe/\",","import React, { Component } from 'react';\r\nimport './NewRecipe.css';\r\nimport axios from 'axios';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst TITLE = \"New recipe\";\r\n\r\nclass NewRecipe extends Component {\r\n    state = {\r\n        title: '',\r\n        ingredients: '',\r\n        instructions: ''\r\n    }\r\n\r\n    postRecipeHandler = () => {\r\n        const data = {\r\n            title: this.state.title,\r\n            ingredients: this.state.ingredients,\r\n            instructions: this.state.instructions\r\n        };\r\n\r\n        axios.post('https://recipe-project-6.firebaseio.com/podaci.json', data)\r\n        .then(response => {\r\n            this.props.history.replace('/recipes');\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Helmet>\r\n                    <title>{TITLE}</title>\r\n                </Helmet>\r\n                \r\n                <div className=\"NewRecipe\">\r\n                    <h1>Add Recipe</h1>\r\n                    <label>Title</label>\r\n                    <input type=\"text\" onChange={(event) => this.setState({title: event.target.value})} />\r\n                    <label>Ingredients</label>\r\n                    <input type=\"text\" name=\"ingredients\" onChange={(event) => this.setState({ingredients: event.target.value})} />\r\n                    <label>Instructions</label>\r\n                    <textarea rows=\"4\" onChange={(event) => this.setState({instructions: event.target.value})} />\r\n\r\n                    <button onClick={this.postRecipeHandler}>Add Recipe</button> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewRecipe;","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport Recipes from './Recipes/Recipes';\r\nimport NewRecipe from './NewRecipe/NewRecipe';\r\nimport { Route, NavLink, Switch, Redirect } from 'react-router-dom'; \r\n\r\nclass Home extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"Home\">\r\n                <header>\r\n                    <nav>\r\n                        <ul>\r\n                            <li><NavLink to=\"/recipes\" >Recipes</NavLink></li>\r\n                            <li><NavLink to=\"/new-recipe\">New Recipe</NavLink></li>\r\n                        </ul>\r\n                    </nav>\r\n                </header>\r\n\r\n                <Redirect from=\"/\" to=\"/recipes\" />\r\n                <Switch>\r\n                    <Route path=\"/recipes\" component={Recipes} />\r\n                    <Route path=\"/new-recipe\" component={NewRecipe} />\r\n                    <Route render={() => <h1>Not found</h1>} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './containers/Home/Home';\nimport { BrowserRouter } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Home />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}